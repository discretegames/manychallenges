Print: 232792560

Python:
	n = 20
	from math import lcm
	print(lcm(*range(1, n+1)))
Also:
	n = 20
	def gcd(a, b):
		while b:
			a, b = b, a % b
		return a
	def lcm(a, b):
		return abs(a * b) // gcd(a, b)
	from functools import reduce
	print(reduce(lcm, range(1, n+1)))
Also:
	n = 20
	def gcd(a, b):
		while b:
			a, b = b, a % b
		return a
	def lcm(a, b):
		return abs(a * b) // gcd(a, b)
	def lcm_nums(nums):
		m = 1
		for num in nums:
			m = lcm(m, num)
		return m
	print(lcm_nums(range(1, n+1)))

JavaScript:
	const n = 20;
	function gcd(a, b) {
		while (b) {
			[a, b] = [b, a % b];
		}
		return a;
	}
	function lcm(a, b) {
		return Math.floor(Math.abs(a * b) / gcd(a, b));
	}
	console.log([...Array(n+1).keys()].slice(1).reduce(lcm))

Ruby:
	n = 20
	def gcd(a, b)
		while b.nonzero?
			a, b = [b, a % b]
		end
		return a
	end
	def lcm(a, b)
		return (a * b).abs / gcd(a, b)
	end
	puts (1..n).reduce :lcm

PHP:
	<?php
		$n = 20;
		function gcd($a, $b) {
			while (boolval($b)) {
				$tmp = $a;
				$a = $b;
				$b = $tmp % $b;
			}
			return $a;
		}
		function lcm($a, $b) {
			return intdiv(abs($a * $b), gcd($a, $b));
		}
		echo array_reduce(range(1, $n), "lcm", 1) . "\n";
	?>


R:
	n <- 20
	gcd <- function(a, b) {
		while (b != 0) {
			tmp <- a
			a <- b
			b <- tmp %% b
		}
		return(a)
	}
	lcm <- function(a, b) {
		return(abs(as.double(a) * b) / gcd(a, b))
	}
	cat(Reduce(lcm, 1:n), '\n', sep='')

C#:
	using System;
	using System.Linq;
	class PE {
		static long Gcd(long a, long b) {
			while (b != 0) {
				long tmp = a;
				a = b;
				b = tmp % b;
			}
			return a;
		}
		static long Lcm(long a, long b) {
			return Math.Abs(a * b) / Gcd(a, b);
		}
		static void Main(string[] args) {
			int n = 20;
			long answer = Enumerable.Range(1, n).Aggregate(1L, (a, b) => Lcm(a, b));
			System.Console.WriteLine(answer);
		}
	}

Java:
	import java.util.*;
	import java.util.stream.*;

	class PE {
		private static long Gcd(long a, long b) {
			while (b != 0) {
				long tmp = a;
				a = b;
				b = tmp % b;
			}
			return a;
		}
		private static long Lcm(long a, long b) {
			return Math.abs(a * b) / Gcd(a, b);
		}
		public static void main(String[] args) {
			int n = 20;
			long answer = LongStream.range(1, n).reduce(1, (a, b) -> Lcm(a, b));
			System.out.println(answer);
		}
	}

Kotlin:
	fun gcd(a_arg: Long, b_arg: Long): Long {
		var a = a_arg
		var b = b_arg
		while (b != 0L) {
			var tmp = a
			a = b
			b = tmp % b
		}
		return a
	}
	fun lcm(a: Long, b: Long): Long {
		return Math.abs(a * b) / gcd(a, b)
	}
	fun main(args: Array<String>) {
		val n: Long = 20
		println((1..n).reduce { a, b -> lcm(a, b) })
	}

Dart:
	int lcm(int a, int b) {
		return (a * b).abs() ~/ a.gcd(b);
	}
	void main() {
		var n = 20;
		print([for(var i=1; i<=n; i+=1) i].reduce(lcm));
	}

C, C++:
	#include <stdio.h>
	#include <stdlib.h>
	long long gcd(long long a, long long b) {
		while (b != 0) {
			long long tmp = a;
			a = b;
			b = tmp % b;
		}
		return a;
	}
	long long lcm(long long a, long long b) {
		return llabs(a * b) / gcd(a, b);
	}
	int main() {
		int n = 20;
		long long answer = 1;
		for (int i = 1; i <= n; i++) {
			answer = lcm(answer, i);
		}
		printf("%d\n", answer);
	}

Go:
	package main
	import "fmt"
	func gcd(a, b int64) int64 {
		for b != 0 {
			a, b = b, a%b
		}
		return a
	}
	func lcm(a, b int64) int64 {
		return a * b / gcd(a, b)
	}
	func main() {
		n := 20
		var answer int64 = 1
		for i := 1; i <= n; i++ {
			answer = lcm(answer, int64(i))
		}
		fmt.Println(answer)
	}

Rust:
	fn gcd(mut a: i64, mut b: i64) -> i64 {
		while b != 0 {
			let tmp = a;
			a = b;
			b = tmp % b;
		}
		return a;
	}

	fn lcm(a: i64, b: i64) -> i64 {
		return (a * b).abs() / gcd(a, b);
	}
	fn main() {
		let n = 20;
		let mut answer: i64 = 1;
		for i in 1..n {
			answer = lcm(answer, i as i64);
		}
		println!("{}", answer);
	}

Haskell:
	n = 20
	main = print(foldl1 lcm [1..n])

Racket:
	#lang racket
	(define n 20)
	(define answer (foldl lcm 1 (range 1 (+ n 1))))
	(display (string-append (~a answer) "\n"))