%% Solutions to https://adventofcode.com/2021/day/2. Run this file with runmany: https://pypi.org/project/runmany

Settings: {"cwd": "adventofcode/2021"}

Argv: 2t.txt
Also: 2.txt

Python:
    def p1(data):
        x = y = 0
        for cmd, amt in data:
            if cmd == 'forward':
                x += amt
            elif cmd == 'down':
                y += amt
            else:
                y -= amt
        return x * y

    def p2(data):
        x = y = aim = 0
        for cmd, amt in data:
            if cmd == 'down':
                aim += amt
            elif cmd == 'up':
                aim -= amt
            else:
                x += amt
                y += aim * amt
        return x * y
        
    import sys
    with open(sys.argv[1]) as file:
        data = [(cmd, int(amt)) for cmd, amt in map(str.split, file)]

    print(p1(data))
    print(p2(data))


JavaScript:
    function p1(data) {
        let x = 0, y = 0;
        for (const [cmd, amt] of data) {
            if (cmd === 'forward') x += amt;
            else if (cmd === 'down') y += amt;
            else y -= amt;
        }
        return x * y;
    }

    function p2(data) {
        let x = 0, y = 0, aim = 0;
        for (const [cmd, amt] of data) {
            if (cmd === 'down') aim += amt;
            else if (cmd === 'up') aim -= amt;
            else {
                x += amt;
                y += aim * amt;
            }
        }
        return x * y;
    }

    const fs = require('fs');;
    const data = fs.readFileSync(process.argv[2], 'utf8').split('\n').map(line => {
        const [cmd, amt] = line.split(' ');
        return [cmd, parseInt(amt)]; 
    });

    console.log(p1(data))
    console.log(p2(data))


Java:
    import java.util.*;
    import java.nio.file.*;
    import java.io.IOException;
    import java.util.stream.Collectors;

    public class AoC {

        private static int p1(List<String[]> data) {
            int x = 0, y = 0;
            for (String[] d : data) {
                String cmd = d[0];
                int amt = Integer.parseInt(d[1]);
                if (cmd.equals("forward")) {
                    x += amt;
                } else if (cmd.equals("down")) {
                    y += amt;
                } else {
                    y -= amt;
                }
            }
            return x * y;
        }

        private static int p2(List<String[]> data) {
            int x = 0, y = 0, aim = 0;
            for (var d : data) {
                var cmd = d[0];
                var amt = Integer.parseInt(d[1]);
                if (cmd.equals("down")) {
                    aim += amt;
                } else if (cmd.equals("up")) {
                    aim -= amt;
                } else {
                    x += amt;
                    y += aim * amt;
                }
            }
            return x * y;
        }

        public static void main(String[] args) {
            try {
                var data = Files.lines(Paths.get(args[0])).map(line -> line.split(" ")).collect(Collectors.toList());
                System.out.println(AoC.p1(data));
                System.out.println(AoC.p2(data));
            } catch (IOException e) {}
        }
    }


C#:
    using System;
    using System.IO;
    class AoC {

        static int P1(string[][] data) {
            int x = 0, y = 0;
            foreach(var d in data) {
                var cmd = d[0];
                var amt = Int32.Parse(d[1]);
                if (cmd.Equals("forward")) {
                    x += amt;
                } else if (cmd.Equals("down")) {
                    y += amt;
                } else {
                    y -= amt;
                }
            }
            return x * y;
        }

        static int P2(string[][] data) {
            int x = 0, y = 0, aim = 0;
            foreach(var d in data) {
                var cmd = d[0];
                var amt = Int32.Parse(d[1]);
                if (cmd.Equals("down")) {
                    aim += amt;
                } else if (cmd.Equals("up")) {
                    aim -= amt;
                } else {
                    x += amt;
                    y += aim * amt;
                }
            }
            return x * y;
        }

        static void Main(string[] args)    {
            var data = Array.ConvertAll(File.ReadAllText(args[0]).Split('\n'), line => line.Split(' '));
            System.Console.WriteLine(P1(data));
            System.Console.WriteLine(P2(data));
        }
    }


C:
    #include <stdio.h>
    #include <string.h>
    #include <stdlib.h>

    int p1(char *cmds, int *amts, int length) {
        int x = 0, y = 0;
        for (int i = 0; i < length; i++) {
            if (cmds[i] == 'f') {
                x += amts[i];
            } else if (cmds[i] == 'd') {
                y += amts[i];
            } else {
                y -= amts[i];
            }
        }
        return x * y;
    }
    
    int p2(char *cmds, int *amts, int length) {
        int x = 0, y = 0, aim = 0;
        for (int i = 0; i < length; i++) {
            if (cmds[i] == 'd') {
                aim += amts[i];
            } else if (cmds[i] == 'u') {
                aim -= amts[i];
            } else {
                x += amts[i];
                y += aim * amts[i];
            }
        }
        return x * y;
    }

    int main(int argc, char *argv[])
    {
        int length = 0, size = 1;
        char *cmds = malloc(sizeof(char) * size);
        int *amts = malloc(sizeof(int) * size);

        char line[32];
        FILE* file = fopen(argv[1], "r");

        while(fgets(line, 32, file)) {
            if (length + 1 == size) {
                size *= 2;
                cmds = realloc(cmds, sizeof(char) * size);
                amts = realloc(amts, sizeof(int) * size);
            }
            cmds[length] = strtok(line, " ")[0];
            amts[length++] = atoi(strtok(NULL, ""));
        }
        fclose(file);

        printf("%d\n", p1(cmds, amts, length));
        printf("%d\n", p2(cmds, amts, length));
        free(amts);
        free(cmds);
    }


Rust:
    fn p1(data: &Vec<(char, i32)>) -> i32 {
        let (mut x, mut y) = (0, 0);
        for &(cmd, amt) in data.iter() {
            if cmd == 'f' {
                x += amt;
            } else if cmd == 'd' {
                y += amt;
            } else {
                y -= amt;
            }
        }
        x * y
    }

    fn p2(data: &Vec<(char, i32)>) -> i32 {
        let (mut x, mut y, mut aim) = (0, 0, 0);
        for &(cmd, amt) in data.iter() {
            if cmd == 'd' {
                aim += amt;
            } else if cmd == 'u' {
                aim -= amt;
            } else {
                x += amt;
                y += aim * amt;
            }
        }
        x * y
    }


    fn main() {
        let file = std::fs::read_to_string(std::env::args().nth(1).unwrap()).expect("bad file");
        let data: Vec<(char, i32)> = file.lines().map(|line| -> (char, i32) {
            let split = line.split(" ").collect::<Vec<_>>();
            (split[0].chars().next().unwrap(), split[1].parse().unwrap())
        }).collect();

        println!("{}", p1(&data));
        println!("{}", p2(&data));
    }
