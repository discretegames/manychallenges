%% Solutions to https://adventofcode.com/2021/day/1. Run this file with runmany: https://pypi.org/project/runmany

Settings: {"cwd": "adventofcode/2021"}

Argv: 1t.txt
Also: 1.txt


Python:
    def solver(nums, s):
        return sum(a < b for a,b in zip(nums, nums[s:]))

    def p1(nums):
        return solver(nums, 1)

    def p2(nums):
        return solver(nums, 3)

    import sys
    with open(sys.argv[1]) as file:
        nums = [int(n) for n in file.readlines()]
    print(p1(nums))
    print(p2(nums))


JavaScript:
    function solver(nums, s) {
        let count = 0;
        for (let i = s; i < nums.length; i++)
            count += nums[i] > nums[i-s];
        return count;
    }

    function p1(nums) {
        return solver(nums, 1);
    }

    function p2(nums) {
        return solver(nums, 3);
    }

    const fs = require('fs');
    const nums = fs.readFileSync(process.argv[2], 'utf8').split('\n').map(n => parseInt(n));
    console.log(p1(nums));
    console.log(p2(nums));


Java:
    import java.util.*;
    import java.nio.file.*;
    import java.io.IOException;
    import java.util.stream.Collectors;

    public class AoC {

        private static int solver(List<Integer> nums, int s) {
            int count = 0;
            for (int i = s; i < nums.size(); i++) {
                count += nums.get(i) > nums.get(i-s) ? 1 : 0;
            }
            return count;
        }

        private static int p1(List<Integer> nums) {
            return AoC.solver(nums, 1);
        }

        private static int p2(List<Integer> nums) {
            return AoC.solver(nums, 3);
        }

        public static void main(String[] args) {
            try {
                var nums = Files.lines(Paths.get(args[0])).map(Integer::parseInt).collect(Collectors.toList());
                System.out.println(AoC.p1(nums));
                System.out.println(AoC.p2(nums));
            } catch (IOException e) {}
        }
    }


C#:
    using System;
    using System.IO;
    class AoC {
        static int Solver(int[] nums, int s) {
            var count = 0;
            for (var i = s; i < nums.Length; i++) {
                if (nums[i] > nums[i-s]) count++;
            }
            return count;
        }

        static int P1(int[] nums) {
            return Solver(nums, 1);
        }

        static int P2(int[] nums) {
            return Solver(nums, 3);
        }

        static void Main(string[] args)    {
            int[] nums = Array.ConvertAll(File.ReadAllText(args[0]).Split('\n'), n => int.Parse(n));
            System.Console.WriteLine(P1(nums));
            System.Console.WriteLine(P2(nums));
        }
    }

C:
    #include <stdio.h>
    int solver(int *nums, int length, int s) {
        int count = 0;
        for(int i = s; i < length; i++) {
            count += nums[i] > nums[i-s];
        }
        return count;
    }

    int p1(int *nums, int length) {
        return solver(nums, length, 1);
    }
    
    int p2(int *nums, int length) {
        return solver(nums, length, 3);
    }

    int main(int argc, char *argv[])
    {
        int length = 0;
        int size = 8;
        int *nums = malloc(sizeof(int) * size);

        FILE* file;
        char n[32];
        file = fopen(argv[1], "r");
        while(fgets(n, 32, file)) {
            if (length + 1 == size) {
                size *= 2;
                nums = realloc(nums, sizeof(int) * size);
            }
            nums[length++] = atoi(n);
        }
        fclose(file);

        printf("%d\n", p1(nums, length));
        printf("%d\n", p2(nums, length));
        free(nums);
    }


Rust:
    fn solver(nums: &Vec<i32>, s: usize) -> i32 {
        let mut count = 0;
        for i in s..nums.len() {
            if nums[i] > nums[i-s] { count += 1; }
        }
        count
    }

    fn p1(nums: &Vec<i32>) -> i32 {
        solver(nums, 1)
    }

    fn p2(nums: &Vec<i32>) -> i32 {
        solver(nums, 3)
    }

    fn main() {
        let file = std::fs::read_to_string(std::env::args().nth(1).unwrap()).expect("bad file");
        let nums: Vec<i32> = file.lines().map(|n| n.parse().unwrap()).collect();
        println!("{}", p1(&nums));
        println!("{}", p2(&nums));
    }


Haskell:
    {-# LANGUAGE TypeApplications #-}
    import System.Environment
    solver nums s = sum [1 | (a, b) <- zip nums (drop s nums), a < b]
    p1 nums = solver nums 1
    p2 nums = solver nums 3
    main = do
        arg <- head <$> getArgs
        nums <- map (read @Int) . words <$> readFile arg
        print $ p1 nums
        print $ p2 nums
