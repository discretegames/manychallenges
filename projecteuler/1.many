%% Solutions to https://projecteuler.net/problem=1. Run this file with runmany: https://pypi.org/project/runmany

Print: 233168

Python:
	stop = 1000
	total = 0
	for i in range(stop):
		if i % 3 == 0 or i % 5 == 0:
			total += i
	print(total)
Also:
	limit = 1000
	def t(n):
		return n*(n+1)//2
	def f(n):
		return n * t((limit - 1) // n)
	print(f(3) + f(5) - f(15))

JavaScript:
	const stop = 1000;
	let total = 0;
	for (let i = 0; i < stop; i++) {
		if (i % 3 == 0 || i % 5 == 0) {
			total += i;
		}
	}
	console.log(total)
Also:
	const limit = 1000
	function t(n) {
		return Math.floor(n*(n+1)/2)
	}
	function f(n) {
		return n * t(Math.floor((limit - 1) / n))
	}
	console.log(f(3) + f(5) - f(15))

Ruby:
	stop = 1000
	total = 0
	for i in 0..stop-1
		if i % 3 == 0 || i % 5 == 0 then
			total += i
		end
	end
	puts total
Also:
	$limit = 1000
	def t(n)
		n * (n + 1) / 2
	end
	def f(n)
		n * t(($limit - 1) / n)
	end
	puts f(3) + f(5) - f(15)

PHP:
	<?php
		$stop = 1000;
		$total = 0;
		for ($i = 0; $i < 1000; $i++) {
			if ($i % 3 == 0 || $i % 5 == 0) {
				$total += $i;
			}
		}
		echo $total . "\n";
	?>
Also:
	<?php
		$limit = 1000;
		function t($n) {
			return intdiv($n * ($n + 1), 2);
		}
		function f($n) {
			global $limit;
			return $n * t(intdiv($limit - 1, $n));
		}
		echo f(3) + f(5) - f(15) . "\n";
	?>

R:
	stop <- 1000
	total <- 0
	for (i in 0:stop-1) {
		if (i %% 3 == 0 | i %% 5 == 0) {
			total <- total + i
		}
	}
	cat(total, '\n', sep='')
Also:
	limit <- 1000
	t <- function(n) {
		return((n * (n + 1)) %/% 2)
	}
	f <- function(n) {
		return(n * t((limit - 1) %/% n))
	}
	cat(f(3) + f(5) - f(15), '\n', sep='')

C#:
	class PE {
		static void Main(string[] args)	{
			int stop = 1000;
			int total = 0;
			for (int i = 0; i < stop; i++) {
				if (i % 3 == 0 || i % 5 == 0) {
					total += i;
				}
			}
			System.Console.WriteLine(total);
		}
	}
Also:
	class PE {
		const int limit = 1000;
		static int t(int n) {
			return n * (n + 1) / 2;
		}
		static int f(int n) {
			return n * t((limit - 1) / n);
		}
		static void Main(string[] args) {
			System.Console.WriteLine(f(3) + f(5) - f(15));
		}
	}

Java:
	class PE {
		public static void main(String[] args) {
			int stop = 1000;
			int total = 0;
			for (int i = 0; i < stop; i++) {
				if (i % 3 == 0 || i % 5 == 0) {
					total += i;
				}
			}
			System.out.println(total);
		}
	}
Also:
	class PE {
		private static final int limit = 1000;
		private static int t(int n) {
			return n * (n + 1) / 2;
		}
		private static int f(int n) {
			return n * t((limit - 1) / n);
		}
		public static void main(String[] args) {
			System.out.println(f(3) + f(5) - f(15));
		}
	}

Kotlin:
	fun main() {
		val stop = 1000
		var total = 0
		for (i in 0..stop-1) {
			if (i % 3 == 0 || i % 5 == 0) {
				total += i
			}
		}
		println(total)
	}
Also:
	val limit = 1000;
	fun t(n: Int): Int {
		return n * (n + 1) / 2;
	}
	fun f(n: Int): Int {
		return n * t((limit - 1) / n)
	}
	fun main() {
		println(f(3) + f(5) - f(15))
	}

Dart:
	void main() {
		const stop = 1000;
		var total = 0;
		for (var i = 0; i < stop; i++) {
			if (i % 3 == 0 || i % 5 == 0) {
				total += i;
			}
		}
		print(total);
	}
Also:
	const limit = 1000;
	int t(int n) {
		return n * (n + 1) ~/ 2;
	}
	int f(int n) {
		return n * t((limit - 1) ~/ n);
	}
	void main() {
		print(f(3) + f(5) - f(15));
	}

C:
	#include <stdio.h>
	int main() {
		int stop = 1000;
		int total = 0;
		for (int i = 0; i < stop; i++) {
			if (i % 3 == 0 || i % 5 == 0) {
				total += i;
			}
		}
		printf("%d\n", total);
	}
Also:
	#include <stdio.h>
	int const limit = 1000;
	int t(int n) {
		return n * (n + 1) / 2;
	}
	int f(int n) {
		return n * t((limit - 1) / n);
	}
	int main() {
		printf("%d\n", f(3) + f(5) - f(15));
	}

C++:
	#include <iostream>
	using namespace std;
	int main() {
		int stop = 1000;
		int total = 0;
		for (int i = 0; i < stop; i++) {
			if (i % 3 == 0 || i % 5 == 0) {
				total += i;
			}
		}
		cout << total << endl;
	}
Also:
	#include <iostream>
	using namespace std;
	const int limit = 1000;
	int t(int n) {
		return n * (n + 1) / 2;
	}
	int f(int n) {
		return n * t((limit - 1) / n);
	}
	int main() {
		cout << f(3) + f(5) - f(15) << endl;
	}

Go:
	package main
	import "fmt"
	func main() {
		const stop = 1000
		var total = 0
		for i := 0; i < stop; i++ {
			if i % 3 == 0 || i % 5 == 0 {
				total += i
			}
		}
		fmt.Println(total)
	}
Also:
	package main
	import "fmt"
	const limit = 1000
	func t(n int) int {
		return n * (n + 1) / 2;
	}
	func f(n int) int {
		return n * t((limit - 1) / n)
	}
	func main() {
		fmt.Println(f(3) + f(5) - f(15))
	}

Rust:
	fn main() {
		let stop = 1000;
		let mut total = 0;

		for i in 0..stop {
			if i % 3 == 0 || i % 5 == 0 {
				total += i;
			}
		}
		println!("{}", total);
	}
Also:
	static limit: i32 = 1000;
	fn t(n: i32) -> i32 {
		return n * (n + 1) / 2;
	}
	fn f(n: i32) -> i32 {
		return n * t((limit - 1) / n);
	}
	fn main() {
		println!("{}", f(3) + f(5) - f(15));
	}

Haskell:
	main = print (pe1 1000)
	pe1 stop = sum [x | x <- [1..stop-1], mod x 3 == 0 || mod x 5 == 0]
Also:
	limit = 1000
	t n = n * (n + 1) `div` 2
	f n = n * t((limit - 1) `div` n)
	main = print(f(3) + f(5) - f(15))

Racket:
	#lang racket
	(define stop 1000)
	(define total 0)
	(for ([i stop])
		(if	(or (equal? (remainder i 3) 0) (equal? (remainder i 5) 0))
			(set! total (+ total i)) 0
		)
	)
	(display (string-append (~a total) "\n"))
Also:
	#lang racket
	(define limit 1000)
	(define (t n) (quotient (* n (+ n 1)) 2))
	(define (f n) (* n (t (quotient (- limit 1) n))))
	(display (string-append (~a (- (+ (f 3) (f 5)) (f 15))) "\n"))