Print: 906609
Python:
	def is_palindrome(s):
		return s == s[::-1]
	largest = 0
	for n1 in range(100, 1000):
		for n2 in range(n1, 1000):
			n = n1 * n2
			if is_palindrome(str(n)):
				largest = max(largest, n)
	print(largest)

Also:
	def is_palindrome(s): return s == s[::-1]
	print(max(n1 * n2 for n1 in range(100, 1000) for n2 in range(n1, 1000) if is_palindrome(str(n1 * n2))))

JavaScript:
	function isPalindrome(s) {
		for (let i = 0; i < s.length/2; i += 1) {
			if (s[i] != s[s.length - 1 - i]) {
				return false;
			}
		}
		return true;
	}
	let largest = 0;
	for (let n1 = 100; n1 < 1000; n1++) {
		for (let n2 = n1; n2 < 1000; n2++) {
			let n = n1 * n2;
			if (isPalindrome(String(n))) {
				largest = Math.max(largest, n);
			}
		}
	}
	console.log(largest);
Also:
	function isPalindrome(s) {
		return s === s.split('').reverse().join('');
	}
	let largest = 0;
	for (let n1 = 100; n1 < 1000; n1++) {
		for (let n2 = n1; n2 < 1000; n2++) {
			let n = n1 * n2;
			if (isPalindrome(String(n))) {
				largest = Math.max(largest, n);
			}
		}
	}
	console.log(largest);

Java:
	class PE {
		private static boolean isPalindrome(String s) {
			for (int i = 0; i < s.length() / 2; i++) {
				if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {
					return false;
				}
			}
			return true;
		}

		public static void main(String[] args) {
			int largest = 0;
			for (int n1 = 100; n1 < 1000; n1++) {
				for (int n2 = n1; n2 < 1000; n2++) {
					int n = n1 * n2;
					if (isPalindrome(Integer.toString(n))) {
						largest = Math.max(largest, n);
					}
				}
			}
			System.out.println(largest);
		}
	}

C#:
	using System;
	class PE {
		static bool isPalindrome(string s) {
			for (var i = 0; i < s.Length / 2; i++) {
				if (s[i] != s[s.Length - 1 - i]) {
					return false;
				}
			}
			return true;
		}

		static void Main(string[] args) {
			var largest = 0;
			for(var n1 = 100; n1 < 1000; n1++) {
				for (var n2 = n1; n2 < 1000; n2++) {
					var n = n1 * n2;
					if (isPalindrome(n.ToString())) {
						largest = Math.Max(largest, n);
					}
				}
			}
			System.Console.WriteLine(largest);
		}
	}

C:
	#include <stdio.h>;
	#include <stdbool.h>;
	int reverse(int n) {
		int r = 0;
		while (n >= 10) {
			r += n % 10;
			r *= 10;
			n /= 10;
		}
		return r + n;
	}
	bool isPalindrome(int n) { // stick with ints since strings are a hassle
		return n == reverse(n);
	}

	int main() {
		int largest = 0;
		for (int n1 = 100; n1 < 1000; n1++) {
			for (int n2 = n1; n2 < 1000; n2++) {
				int n = n1 * n2;
				if (isPalindrome(n) && n > largest) {
					largest = n;
				}
			}
		}
		printf("%d\n", largest);
	}

C++:
	#include <iostream>
	using namespace std;
	int reverse(int n) {
		int r = 0;
		while (n >= 10) {
			r += n % 10;
			r *= 10;
			n /= 10;
		}
		return r + n;
	}
	bool isPalindrome(int n) {
		return n == reverse(n);
	}

	int main() {
		int largest = 0;
		for (int n1 = 100; n1 < 1000; n1++) {
			for (int n2 = n1; n2 < 1000; n2++) {
				int n = n1 * n2;
				if (isPalindrome(n) && n > largest) {
					largest = n;
				}
			}
		}
		cout << largest << endl;
	}

Ruby:
	def is_palindrome(s)
		return s == s.reverse
	end
	largest = 0
	for n1 in 100...1000
		for n2 in n1...1000
			n = n1 * n2
			if is_palindrome n.to_s and n > largest
				largest = n
			end
		end
	end
	puts largest

PHP:
	<?php
		function isPalindrome($s) {
			return $s == strrev($s);
		}
		$largest = 0;
		for ($n1 = 100; $n1 < 1000; $n1++) {
			for ($n2 = $n1; $n2 < 1000; $n2++) {
				$n = $n1 * $n2;
				if (isPalindrome(strval($n))) {
					$largest = max($largest, $n);
				}
			}
		}
		echo $largest;
	?>

R:
	isPalindrome <- function(s) {
		return(s == paste(rev(strsplit(s, "")[[1]]), collapse=""))
	}
	largest <- 0
	for (n1 in 100:999) {
		for (n2 in n1:999) {
			n <- n1 * n2
			if (isPalindrome(toString(n))) {
				largest <- max(largest, n)
			}
		}
	}
	cat(largest, '\n', sep='')

Rust:
	fn is_palindrome(s: &str) -> bool {
		return s.eq(&s.chars().rev().collect::<String>());
	}
	fn main() {
		let mut largest = 0;
		for n1 in 100..1000 {
			for n2 in n1..1000 {
				let n = n1 * n2;
				if (is_palindrome(&n.to_string())) {
					largest = largest.max(n);
				}
			}
		}
		println!("{}", largest);
	}

Go:
	package main
	import ("strconv"
			"fmt")
	func isPalindrome(s string) bool {
		for i := 0; i < len(s); i++ {
			if (s[i] != s[len(s) - 1 - i]) {
				return false
			}
		}
		return true
	}
	func main() {
		largest := 0
		for n1 := 100; n1 < 1000; n1++ {
			for n2 := n1; n2 < 1000; n2++ {
				n := n1 * n2
				if isPalindrome(strconv.Itoa(n)) && n > largest {
					largest = n
				}
			}
		}
		fmt.Println(largest)
	}

Dart:
	import 'dart:math';
	bool isPalindrome(String s) {
		return s == s.split('').reversed.join('');
	}
	void main() {
		var largest = 0;
		for (var n1 = 100; n1 < 1000; n1++) {
			for (var n2 = n1; n2 < 1000; n2++) {
				var n = n1 * n2;
				if (isPalindrome(n.toString())) {
					largest = max(largest, n);
				}
			}
		}
		print(largest);
	}

Kotlin:
	fun isPalindrome(s: String): Boolean {
		return s == s.reversed();
	}
	fun main() {
		var largest = 0;
		for (n1 in 100..999) {
			for (n2 in n1..999) {
				var n = n1 * n2;
				if (isPalindrome(n.toString())) {
					largest = Math.max(largest, n);
				}
			}
		}
		println(largest);
	}

Racket:
	#lang racket
	(define (reverse-string s) (string-join (map string (reverse (string->list s))) ""))
	(define (is-palindrome s) (equal? s (reverse-string s)))
	(define (int-max a b) (if (> a b) a b))
	(display (foldr int-max 0
		(filter
			(lambda (n) (is-palindrome (~s n)))
			(for*/list ([n1 (in-range 100 1000)] [n2 (in-range n1 1000)])
				(* n1 n2)
			)
		)
	))
	(display "\n")

Haskell:
	largest = maximum [n | n1<-[100..999],
						   n2<-[n1..999],
						   let n = n1 * n2,
						   let s = show n,
						   s == reverse s]
	main = print largest
